/// Grab the ui package that helps us to make ui's [guis]!
grab("birb:ui");

/// Create a new window instance!
var app = new Window;

/// Initialize all of the backend [opengl]
app.init();

/// Now create the actual window!!!! Hurray!
app.create(600, 600, "Hello World!");

/// This is optional but it can straight away make your window transparent!!!
/// Its sooo cool that we can do this in birb as even in electron we cannot do that (:
app.setOpacity(1.0);

bool show = false;

void keyCallback(int key, int action) {
  if (key == Keys.Space) {
    if (action == Events.keyDown || action == Events.keyRepeat) {
      show = true;
    }
    else {
      show = false;
    }
  }
}

void mouseCallback(int mouseX, int mouseY) {
  scremLn(mouseX + " : " + mouseY);
}

/// This is the loop where you will draw and clear stuff and this is called a [draw] loop.
while (app.running()) {
  app.onKeyPress(keyCallback);
  app.onMouseEvent(mouseCallback);

  /// Clear the screen
  /// Providing a color is [optional] but here is an example how you can do it!
  /// So if you provide no args it will default to [Colors.black]. The args should be a double and in the format [r, g, b] or you can use the premade [Colors].
  app.clear(Colors.black);
  
  // Start Drawing Here!

  /// Set the color of the next shape that needs to be drawn.
  app.setColor(Colors.white);

  /// This will draw a point in the center of the screen which is [0.0, 0.0] with the size of 1.0px
  app.drawPoint(0.0, 0.0, 1.0);

  /// Lets make this triangle [Colors.red]
  app.setColor(Colors.red);

  /// A triangle is a plane created by connecting three points. 
  /// The first two arguments specify the first point, the middle two arguments specify the second point, and the last two arguments specify the third point.
  app.drawTriangle(
    -30.0, -75.0,
    -86.0, -75.0,
    -58.0, -20.0
  );

  /// Go back to the default color
  app.setColor(Colors.white);

  /// Draws a line (a direct path between two points) to the screen.
  app.drawLine(
    30.0, 20.0,
    85.0, 75.0
  );

  /// We generally do push and pop so the shapes and drawing functions that we do in between these two functions do not affect the whole canvas.
  /// Push the matrix
  app.push();
  
  app.translate(100.0, 100.0);
  app.drawPoint(0.0, 0.0, 1.0);

  /// Pop the matrix
  app.pop();

  /// Push the matrix
  app.push();
  
  if (show) {
    app.translate(200.0, 0.0);
    app.drawPoint(0.0, 0.0, 20.0);
  }

  app.pop();
  /// Pop the matrix

  // End Drawing Here!
  
  /// Here we swap the buffers and poll events. Stuff that birb auto does for you so no need to panic!
  app.continueLoop();
}

// Terminate the window. You can also use `io.exit()` but that will terminate the whole app.
app.terminate();